function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useRef, useEffect, useState } from "react";
import { PanResponder, StyleSheet, View, Animated, Easing } from "react-native";
import Svg, { G, Path, Rect } from "react-native-svg";
const defaultColor = "#fdd835";
const defaultAnimationConfig = {
  easing: Easing.elastic(2),
  duration: 300,
  scale: 1.2,
  delay: 300
};

const StarRating = ({
  rating,
  maxStars = 5,
  minRating = 0.5,
  starSize = 32,
  onChange,
  color = defaultColor,
  emptyColor = color,
  enableHalfStar = true,
  enableSwiping = true,
  animationConfig = defaultAnimationConfig,
  style,
  starStyle,
  testID
}) => {
  const width = useRef();
  const ref = useRef(null);
  const [isInteracting, setInteracting] = useState(false);

  const handleInteraction = x => {
    if (width.current) {
      const newRating = Math.max(minRating, Math.ceil(x / width.current * maxStars * 2) / 2);
      onChange(enableHalfStar ? newRating : Math.ceil(newRating));
    }
  };

  const panResponder = useRef(PanResponder.create({
    onStartShouldSetPanResponder: () => true,
    onStartShouldSetPanResponderCapture: () => true,
    onMoveShouldSetPanResponder: () => true,
    onMoveShouldSetPanResponderCapture: () => true,
    onPanResponderMove: e => {
      if (enableSwiping) {
        handleInteraction(e.nativeEvent.locationX);
      }
    },
    onPanResponderStart: e => {
      handleInteraction(e.nativeEvent.locationX);
      setInteracting(true);
    },
    onPanResponderEnd: () => {
      setTimeout(() => {
        setInteracting(false);
      }, animationConfig.delay || defaultAnimationConfig.delay);
    }
  }));
  return /*#__PURE__*/React.createElement(View, _extends({
    ref: ref,
    style: [styles.starRating, style]
  }, panResponder.current.panHandlers, {
    onLayout: () => {
      if (ref.current) {
        ref.current.measure((_x, _y, w, _h) => width.current = w);
      }
    },
    testID: testID
  }), [...Array(maxStars)].map((_, i) => {
    const icon = (() => {
      if (rating - i >= 1) {
        return /*#__PURE__*/React.createElement(StarFull, {
          size: starSize,
          color: color
        });
      }

      return rating - i >= 0.5 ? /*#__PURE__*/React.createElement(StarHalf, {
        size: starSize,
        color: color
      }) : /*#__PURE__*/React.createElement(StarBorder, {
        size: starSize,
        color: emptyColor
      });
    })();

    return /*#__PURE__*/React.createElement(AnimatedIcon, {
      key: i,
      active: isInteracting && rating - i >= 0.5,
      animationConfig: animationConfig,
      style: starStyle
    }, icon);
  }));
};

const AnimatedIcon = ({
  active,
  animationConfig,
  children,
  style
}) => {
  const {
    scale = defaultAnimationConfig.scale,
    easing = defaultAnimationConfig.easing,
    duration = defaultAnimationConfig.duration
  } = animationConfig;
  const animatedSize = useRef(new Animated.Value(active ? scale : 1));
  useEffect(() => {
    const animation = Animated.timing(animatedSize.current, {
      toValue: active ? scale : 1,
      useNativeDriver: true,
      easing,
      duration
    });
    animation.start();
    return animation.stop;
  }, [active, scale, easing, duration]);
  return /*#__PURE__*/React.createElement(Animated.View, {
    pointerEvents: "none",
    style: [styles.star, style, {
      transform: [{
        scale: animatedSize.current
      }]
    }]
  }, children);
};

const StarBorder = ({
  size,
  color
}) => /*#__PURE__*/React.createElement(Svg, {
  height: size,
  viewBox: "0 0 24 24",
  width: size
}, /*#__PURE__*/React.createElement(Path, {
  fill: color,
  d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
}));

const StarFull = ({
  size,
  color
}) => /*#__PURE__*/React.createElement(Svg, {
  height: size,
  viewBox: "0 0 24 24",
  width: size
}, /*#__PURE__*/React.createElement(Path, {
  d: "M0 0h24v24H0z",
  fill: "none"
}), /*#__PURE__*/React.createElement(Path, {
  d: "M0 0h24v24H0z",
  fill: "none"
}), /*#__PURE__*/React.createElement(Path, {
  fill: color,
  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
}));

const StarHalf = ({
  size,
  color
}) => /*#__PURE__*/React.createElement(Svg, {
  height: size,
  viewBox: "0 0 24 24",
  width: size
}, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(Rect, {
  fill: "none",
  height: "24",
  width: "24",
  x: "0"
})), /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(G, null, /*#__PURE__*/React.createElement(Path, {
  fill: color,
  d: "M22,9.24l-7.19-0.62L12,2L9.19,8.63L2,9.24l5.46,4.73L5.82,21L12,17.27L18.18,21l-1.63-7.03L22,9.24z M12,15.4V6.1 l1.71,4.04l4.38,0.38l-3.32,2.88l1,4.28L12,15.4z"
})))));

const styles = StyleSheet.create({
  starRating: {
    flexDirection: "row",
    alignSelf: "flex-start"
  },
  star: {
    marginHorizontal: 5
  }
});
export default StarRating;
//# sourceMappingURL=StarRating.js.map
{"version":3,"sources":["StarRating.tsx"],"names":["defaultColor","defaultAnimationConfig","easing","Easing","elastic","duration","scale","delay","StarRating","rating","maxStars","minRating","starSize","onChange","color","emptyColor","enableHalfStar","enableSwiping","animationConfig","style","starStyle","testID","width","ref","isInteracting","setInteracting","handleInteraction","x","current","newRating","Math","max","ceil","panResponder","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","e","nativeEvent","locationX","onPanResponderStart","onPanResponderEnd","setTimeout","styles","starRating","panHandlers","measure","_x","_y","w","_h","Array","map","_","i","icon","AnimatedIcon","active","children","animatedSize","Animated","Value","animation","timing","toValue","useNativeDriver","start","stop","star","transform","StarBorder","size","StarFull","StarHalf","StyleSheet","flexDirection","alignSelf","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport {\n    PanResponder,\n    StyleSheet,\n    View,\n    StyleProp,\n    ViewStyle,\n    Animated,\n    Easing,\n} from \"react-native\";\nimport Svg, { G, Path, Rect } from \"react-native-svg\";\n\ntype AnimationConfig = {\n    easing?: (value: number) => number;\n    duration?: number;\n    delay?: number;\n    scale?: number;\n};\n\ntype StarRatingProps = {\n    rating: number;\n    onChange: (rating: number) => void;\n    minRating?: number;\n    color?: string;\n    emptyColor?: string;\n    maxStars?: number;\n    starSize?: number;\n    enableHalfStar?: boolean;\n    enableSwiping?: boolean;\n    style?: StyleProp<ViewStyle>;\n    starStyle?: StyleProp<ViewStyle>;\n    animationConfig?: AnimationConfig;\n    testID?: string;\n};\n\nconst defaultColor = \"#fdd835\";\nconst defaultAnimationConfig: Required<AnimationConfig> = {\n    easing: Easing.elastic(2),\n    duration: 300,\n    scale: 1.2,\n    delay: 300,\n};\n\nconst StarRating: React.FC<StarRatingProps> = ({\n    rating,\n    maxStars = 5,\n    minRating = 0.5,\n    starSize = 32,\n    onChange,\n    color = defaultColor,\n    emptyColor = color,\n    enableHalfStar = true,\n    enableSwiping = true,\n    animationConfig = defaultAnimationConfig,\n    style,\n    starStyle,\n    testID,\n}) => {\n    const width = useRef<number>();\n    const ref = useRef<View>(null);\n    const [isInteracting, setInteracting] = useState(false);\n\n    const handleInteraction = (x: number) => {\n        if (width.current) {\n            const newRating = Math.max(\n                minRating,\n                Math.ceil((x / width.current) * maxStars * 2) / 2\n            );\n            onChange(enableHalfStar ? newRating : Math.ceil(newRating));\n        }\n    };\n\n    const panResponder = useRef(\n        PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderMove: e => {\n                if (enableSwiping) {\n                    handleInteraction(e.nativeEvent.locationX);\n                }\n            },\n            onPanResponderStart: e => {\n                handleInteraction(e.nativeEvent.locationX);\n                setInteracting(true);\n            },\n            onPanResponderEnd: () => {\n                setTimeout(() => {\n                    setInteracting(false);\n                }, animationConfig.delay || defaultAnimationConfig.delay);\n            },\n        })\n    );\n\n    return (\n        <View\n            ref={ref}\n            style={[styles.starRating, style]}\n            {...panResponder.current.panHandlers}\n            onLayout={() => {\n                if (ref.current) {\n                    ref.current.measure((_x, _y, w, _h) => (width.current = w));\n                }\n            }}\n            testID={testID}>\n            {[...Array(maxStars)].map((_, i) => {\n                const icon = (() => {\n                    if (rating - i >= 1) {\n                        return <StarFull size={starSize} color={color} />;\n                    }\n\n                    return rating - i >= 0.5 ? (\n                        <StarHalf size={starSize} color={color} />\n                    ) : (\n                        <StarBorder size={starSize} color={emptyColor} />\n                    );\n                })();\n                return (\n                    <AnimatedIcon\n                        key={i}\n                        active={isInteracting && rating - i >= 0.5}\n                        animationConfig={animationConfig}\n                        style={starStyle}>\n                        {icon}\n                    </AnimatedIcon>\n                );\n            })}\n        </View>\n    );\n};\n\ntype AnimatedIconProps = {\n    active: boolean;\n    children: React.ReactElement;\n    animationConfig: AnimationConfig;\n    style?: StyleProp<ViewStyle>;\n};\n\nconst AnimatedIcon: React.FC<AnimatedIconProps> = ({\n    active,\n    animationConfig,\n    children,\n    style,\n}) => {\n    const {\n        scale = defaultAnimationConfig.scale,\n        easing = defaultAnimationConfig.easing,\n        duration = defaultAnimationConfig.duration,\n    } = animationConfig;\n\n    const animatedSize = useRef(new Animated.Value(active ? scale : 1));\n\n    useEffect(() => {\n        const animation = Animated.timing(animatedSize.current, {\n            toValue: active ? scale : 1,\n            useNativeDriver: true,\n            easing,\n            duration,\n        });\n\n        animation.start();\n        return animation.stop;\n    }, [active, scale, easing, duration]);\n\n    return (\n        <Animated.View\n            pointerEvents=\"none\"\n            style={[\n                styles.star,\n                style,\n                {\n                    transform: [\n                        {\n                            scale: animatedSize.current,\n                        },\n                    ],\n                },\n            ]}>\n            {children}\n        </Animated.View>\n    );\n};\n\ntype IconProps = {\n    size: number;\n    color: string;\n};\n\nconst StarBorder: React.FC<IconProps> = ({ size, color }) => (\n    <Svg height={size} viewBox=\"0 0 24 24\" width={size}>\n        <Path\n            fill={color}\n            d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"\n        />\n    </Svg>\n);\n\nconst StarFull: React.FC<IconProps> = ({ size, color }) => (\n    <Svg height={size} viewBox=\"0 0 24 24\" width={size}>\n        <Path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <Path d=\"M0 0h24v24H0z\" fill=\"none\" />\n        <Path\n            fill={color}\n            d=\"M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z\"\n        />\n    </Svg>\n);\n\nconst StarHalf: React.FC<IconProps> = ({ size, color }) => (\n    <Svg height={size} viewBox=\"0 0 24 24\" width={size}>\n        <G>\n            <Rect fill=\"none\" height=\"24\" width=\"24\" x=\"0\" />\n        </G>\n        <G>\n            <G>\n                <G>\n                    <Path\n                        fill={color}\n                        d=\"M22,9.24l-7.19-0.62L12,2L9.19,8.63L2,9.24l5.46,4.73L5.82,21L12,17.27L18.18,21l-1.63-7.03L22,9.24z M12,15.4V6.1 l1.71,4.04l4.38,0.38l-3.32,2.88l1,4.28L12,15.4z\"\n                    />\n                </G>\n            </G>\n        </G>\n    </Svg>\n);\n\nconst styles = StyleSheet.create({\n    starRating: {\n        flexDirection: \"row\",\n        alignSelf: \"flex-start\",\n    },\n    star: {\n        marginHorizontal: 5,\n    },\n});\n\nexport default StarRating;\n"]}